# .github/workflows/pr-files-analyzer.yml
name: PR Files Analyzer

on:
  issues:
    types: [opened, labeled]
  issue_comment:
    types: [created]
  workflow_dispatch:
    inputs:
      pr_url:
        description: 'Pull Request URL (e.g., https://github.com/owner/repo/pull/123)'
        required: true
        type: string
      issue_number:
        description: 'Issue number to update'
        required: true
        type: string

permissions:
  issues: write
  contents: read
  pull-requests: read

jobs:
  analyze-pr-files:
    runs-on: ubuntu-latest
    steps:   
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
  
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests PyGithub markdown bs4 pyyaml

      - name: Extract PR info from input or comment
        id: extract_pr
        run: |
          # Function to extract PR info from URL
          extract_pr_info() {
            local url="$1"
            # Extract owner, repo, and PR number from GitHub PR URL
            if [[ $url =~ https://github\.com/([^/]+)/([^/]+)/pull/([0-9]+) ]]; then
              echo "owner=${BASH_REMATCH[1]}"
              echo "repo=${BASH_REMATCH[2]}"
              echo "pr_number=${BASH_REMATCH[3]}"
              echo "valid=true"
            else
              echo "valid=false"
            fi
          }
          
          # Determine source of PR URL and issue number
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            # Manual trigger
            PR_URL="${{ github.event.inputs.pr_url }}"
            ISSUE_NUMBER="${{ github.event.inputs.issue_number }}"
          elif [ "${{ github.event_name }}" == "issue_comment" ]; then
            # Comment trigger - look for PR URL in comment
            COMMENT_BODY="${{ github.event.comment.body }}"
            PR_URL=$(echo "$COMMENT_BODY" | grep -oP 'https://github\.com/[^/]+/[^/]+/pull/[0-9]+' | head -1)
            ISSUE_NUMBER="${{ github.event.issue.number }}"
            
            # Only proceed if comment contains "/analyze-pr" command
            if [[ ! "$COMMENT_BODY" =~ /analyze-pr ]]; then
              echo "Comment doesn't contain /analyze-pr command, skipping..."
              echo "skip=true" >> $GITHUB_OUTPUT
              exit 0
            fi
          else
            # Issue opened/labeled - look for PR URL in issue body
            ISSUE_BODY="${{ github.event.issue.body }}"
            PR_URL=$(echo "$ISSUE_BODY" | grep -oP 'https://github\.com/[^/]+/[^/]+/pull/[0-9]+' | head -1)
            ISSUE_NUMBER="${{ github.event.issue.number }}"
          fi
          
          echo "issue_number=$ISSUE_NUMBER" >> $GITHUB_OUTPUT
          
          if [ -z "$PR_URL" ]; then
            echo "No PR URL found, skipping..."
            echo "skip=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          echo "pr_url=$PR_URL" >> $GITHUB_OUTPUT
          

      - name: Run PR analysis
        id: python-analysis
        # Run the Python script and capture its output
        env:
          PR_URL: ${{ steps.extract_pr.outputs.PR_URL }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          output=$(python3 .github/scripts/pr_analysis.py)
          
          echo "$output"

          # Save multiline output to GitHub Actions output
          # Using delimiter to handle multiline strings properly
          delimiter="EOF_DELIMITER_$(date +%s)"
          {
            echo "analysis_result<<$delimiter"
            echo "$output"
            echo "$delimiter"
          } >> $GITHUB_OUTPUT
          
          echo "Analysis completed successfully!"

      - name: Add comment to issue
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issueNumber = ${{ steps.extract_pr.outputs.issue_number }};
            const analysisResult = `${{ steps.python-analysis.outputs.analysis_result }}`;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              body: analysisResult
            });
            
            console.log(`Comment added to issue #${issueNumber}`);
      
      - name: Summary
        run: |
          echo "âœ… Python analysis completed and comment added to issue #${{ steps.extract_pr.outputs.issue_number }}"
