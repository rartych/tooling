#!/usr/bin/env python3
"""
Sample analysis script for GitHub Actions workflow.
This script should be placed at scripts/analyze.py in your repository.
"""

import os
import sys
import json
from datetime import datetime
from pathlib import Path

def analyze_project():
    """
    Perform project analysis and return formatted results.
    Replace this function with your actual analysis logic.
    """
    results = []
    results.append("üîç **Project Analysis Report**")
    results.append("")
    results.append(f"üìÖ **Generated:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S UTC')}")
    results.append("")
    
    # Example: Count files by extension
    file_counts = count_files_by_extension()
    results.append("## üìÅ File Analysis")
    for ext, count in file_counts.items():
        results.append(f"- {ext}: {count} files")
    results.append("")
    
    # Example: Check for specific files
    results.append("## üîç Configuration Check")
    config_files = [
        "requirements.txt", "package.json", "Dockerfile", 
        "README.md", ".gitignore", "pyproject.toml"
    ]
    for file in config_files:
        exists = "‚úÖ" if Path(file).exists() else "‚ùå"
        results.append(f"- {exists} {file}")
    results.append("")
    
    # Example: Repository statistics
    results.append("## üìä Repository Statistics")
    total_files = sum(1 for _ in Path('.').rglob('*') if _.is_file())
    results.append(f"- Total files: {total_files}")
    results.append(f"- Repository size: {get_repo_size()}")
    results.append("")
    
    # Example: Recommendations
    results.append("## üöÄ Recommendations")
    recommendations = generate_recommendations()
    for i, rec in enumerate(recommendations, 1):
        results.append(f"{i}. {rec}")
    results.append("")
    
    # Example: Action items
    results.append("## üîß Action Items")
    action_items = generate_action_items()
    for item in action_items:
        results.append(f"- [ ] {item}")
    results.append("")
    
    results.append("---")
    results.append("*This report was automatically generated by GitHub Actions*")
    
    return "\n".join(results)

def count_files_by_extension():
    """Count files by their extension."""
    extensions = {}
    for file_path in Path('.').rglob('*'):
        if file_path.is_file() and not file_path.name.startswith('.'):
            ext = file_path.suffix.lower() or 'no extension'
            extensions[ext] = extensions.get(ext, 0) + 1
    
    # Return top 10 most common extensions
    return dict(sorted(extensions.items(), key=lambda x: x[1], reverse=True)[:10])

def get_repo_size():
    """Get approximate repository size."""
    total_size = 0
    for file_path in Path('.').rglob('*'):
        if file_path.is_file():
            try:
                total_size += file_path.stat().st_size
            except (OSError, PermissionError):
                continue
    
    # Convert to human readable format
    for unit in ['B', 'KB', 'MB', 'GB']:
        if total_size < 1024.0:
            return f"{total_size:.1f} {unit}"
        total_size /= 1024.0
    return f"{total_size:.1f} TB"

def generate_recommendations():
    """Generate analysis-based recommendations."""
    recommendations = []
    
    if Path('requirements.txt').exists():
        recommendations.append("**Dependencies**: Consider using pip-tools for dependency management")
    
    if not Path('tests').exists() and not Path('test').exists():
        recommendations.append("**Testing**: Add a test directory and unit tests")
    
    if not Path('.github/workflows').exists():
        recommendations.append("**CI/CD**: Set up GitHub Actions for automated testing")
    
    if not Path('README.md').exists():
        recommendations.append("**Documentation**: Add a comprehensive README.md file")
    
    return recommendations

def generate_action_items():
    """Generate specific action items."""
    action_items = []
    
    # Check for common issues
    if not Path('.gitignore').exists():
        action_items.append("Create .gitignore file")
    
    if Path('requirements.txt').exists():
        action_items.append("Review and update Python dependencies")
    
    if not any(Path('.').glob('LICENSE*')):
        action_items.append("Add LICENSE file")
    
    action_items.append("Review security vulnerabilities")
    action_items.append("Update documentation")
    
    return action_items

def main():
    """Main function to run the analysis."""
    try:
        # You can access GitHub context via environment variables
        github_event = os.environ.get('GITHUB_EVENT_NAME', 'unknown')
        github_repo = os.environ.get('GITHUB_REPOSITORY', 'unknown')
        
        # Perform analysis
        result = analyze_project()
        
        # Print the result (this will be captured by the workflow)
        print(result)
        
    except Exception as e:
        print(f"‚ùå **Error during analysis:**\n\n```\n{str(e)}\n```")
        sys.exit(1)

if __name__ == "__main__":
    main()
