name: PR validation for CAMARA Project
# A reusable action for validating PRs using tools configuration from branch indicated by input `configurations` variable
# CAMARA Project - Github Action for Pull Reqests
# initial version

on:
  workflow_call:
    # For a workflow to be reusable, the values for on must include workflow_call
    inputs:
      configurations:
        description: folder containing tool configs to be used
        type: string
        required: false
        default: ""

jobs:
  general:
    name: MegaLinter
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Checkout linting config
        uses: actions/checkout@v4
        with:
          repository: rartych/tooling
          path: lint-config
          # using configurations from v0 floating tag
          ref: v0
          sparse-checkout: |
            linting/config/
          sparse-checkout-cone-mode: false
      - name: Copy specified folder to workspace root
        # --strip-trailing-slashes remove any trailing slashes from each SOURCE argument - when ${{ inputs.configurations }} is empty
        run: cp -RT --strip-trailing-slashes ${{ github.workspace }}/lint-config/linting/config/${{ inputs.configurations }} ${{ github.workspace }}
      - name: MegaLinter
        id: ml
        # You can override MegaLinter flavor used to have faster performances
        # c_cpp MegaLinter Flavor https://megalinter.io/latest/flavors/c_cpp/ includes all needed linters - can be upgraded to v8
        uses: oxsecurity/megalinter/flavors/c_cpp@v7
        # configuration of Megalinter
        env:
          VALIDATE_ALL_CODEBASE: true
          PRINT_ALPACA: false
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_COMMENT_REPORTER: true
          GITHUB_STATUS_REPORTER: true
          DISABLE: COPYPASTE,SPELL,JAVASCRIPT,MARKDOWN
          # OPENAPI_SPECTRAL is deprecated but still present in Megalinter v7
          DISABLE_LINTERS: OPENAPI_SPECTRAL, YAML_PRETTIER,REPOSITORY_GRYPE,REPOSITORY_SEMGREP,REPOSITORY_DEVSKIM,REPOSITORY_KICS,REPOSITORY_TRIVY,REPOSITORY_TRIVY_SBOM,REPOSITORY_TRUFFLEHOG,REPOSITORY_CHECKOV,REPOSITORY_GITLEAKS,YAML_V8R,JAVA_PMD
          API_SPECTRAL_CONFIG_FILE: .spectral.yaml
          YAML_YAMLLINT_CONFIG_FILE: .yamllint.yaml
          GHERKIN_GHERKIN_LINT_CONFIG_FILE: .gherkin-lintrc
          API_SPECTRAL_FILTER_REGEX_INCLUDE: (code/API_definitions/)
          YAML_YAMLLINT_FILTER_REGEX_INCLUDE: (code/API_definitions/)
          GHERKIN_GHERKIN_LINT_FILTER_REGEX_INCLUDE: (code/Test_definitions/)
      - name: Archive production artifacts
        if: success() || failure()
        uses: actions/upload-artifact@v4
        with:
          name: MegaLinter reports
          include-hidden-files: "true"
          path: |
            megalinter-reports
            mega-linter.log

#  # Job that runs only when changelog is updated - tbd
#  changelog-changed-job:
#    runs-on: ubuntu-latest
#    
#    steps:
#    - name: Checkout repository
#      uses: actions/checkout@v4
#      with:
#        fetch-depth: 2
#    
#    - name: Check if changelog was updated
#      id: changelog-changed
#      uses: tj-actions/changed-files@ed68ef82c095e0d48ec87eccea555d944a631a4c # v46 
#      with:
#        files: |
#          CHANGELOG.MD
#          CHANGELOG.md
#    
#    - name: Custom job logic
#      if: steps.changelog-changed.outputs.any_changed == 'true'
#      run: |
#        echo "üöÄ Changelog was updated! Running custom job..."
#        
#        # Add your custom logic here
#        echo "Performing custom actions:"
#        echo "‚úÖ Step 1: Custom processing"
#        echo "‚úÖ Step 2: Your business logic"
#        echo "‚úÖ Step 3: Additional operations"
#        
#        # Example: Parse changelog for latest entry
#        echo "Latest changelog entry:"
#        head -20 CHANGELOG.md || head -20 CHANGELOG.MD || echo "No changelog found"
#    
#    - name: Skip message
#      if: steps.changelog-changed.outputs.any_changed != 'true'
#      run: |
#        echo "‚ÑπÔ∏è Changelog not updated, skipping custom job"
